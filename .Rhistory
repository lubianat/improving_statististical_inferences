# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
# Calculate the likelihood ratio ----
# Set total trials
total_trials<- 1000
# Set successes
successes<- 500
# Specify one hypothesis you want to compare with the likihood ratio
theta_H0 <-  .4
# Specify another hypothesis you want to compare with the likihood ratio (you can use 1/20, or 0.05).
# Or you can use the maximum likelihood estimate (considering absence of priors)
maximum_likelihood_estimate = successes/total_trials
theta_H1 <- maximum_likelihood_estimate
binomial_H0 <- dbinom(successes, total_trials, theta_H0)
binomial_H1 <- dbinom(successes, total_trials, theta_H1)
# Returns the likelihood ratio of H0 over H1
binomial_H0/binomial_H1
# Returns the likelihood ratio of H1 over H0
binomial_H1/binomial_H0
# Create 100 theta variables, from 0 to 1
# Theta is the probability of obtating a success
theta<- seq(0,1,len=100)
likelihood <- dbinom(successes,total_trials,theta)
#png(file="LikRatio.png",width=4000,height=3000, , units = "px", res = 900)
plot(theta,likelihood,type='l',xlab=expression(theta), ylab='Likelihood', lwd=2)
points(theta_H0, binomial_H0)
points(theta_H1, binomial_H1)
segments(theta_H0, binomial_H0,successes/total_trials, binomial_H0, lty=2, lwd=2)
segments(theta_H1, binomial_H1,successes/total_trials, binomial_H1, lty=2, lwd=2)
segments(successes/total_trials, binomial_H0,successes/total_trials, binomial_H1, lwd=2)
title(paste('Likelihood Ratio H0/H1:',round(binomial_H0/binomial_H1,digits=2)," Likelihood Ratio H1/H0:",round(binomial_H1/binomial_H0,digits=2)))
#dev.off()
#© Daniel Lakens, 2016.
# Modified and re-released in CC-BY-NC-SA by Tiago Lubiana, 2016
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Calculate the likelihood ratio----
n<-100#set total trials
x<-50#set successes
H0 <- .4 #specify one hypothesis you want to compare with the likihood ratio
H1 <- /100 #specify another hypothesis you want to compare with the likihood ratio (you can use 1/20, or 0.05)
dbinom(x,n,H0)/dbinom(x,n,H1) #Returns the likelihood ratio of H0 over H1
dbinom(x,n,H1)/dbinom(x,n,H0) #Returns the likelihood ratio of H1 over H0
theta<- seq(0,1,len=100) #create theta variable, from 0 to 1
like <- dbinom(x,n,theta)
#png(file="LikRatio.png",width=4000,height=3000, , units = "px", res = 900)
plot(theta,like,type='l',xlab=expression(theta), ylab='Likelihood', lwd=2)
points(H0,dbinom(x,n,H0))
points(H1,dbinom(x,n,H1))
segments(H0, dbinom(x,n,H0), x/n, dbinom(x,n,H0), lty=2, lwd=2)
segments(H1, dbinom(x,n,H1), x/n, dbinom(x,n,H1), lty=2, lwd=2)
segments(x/n, dbinom(x,n,H0), x/n, dbinom(x,n,H1), lwd=2)
title(paste('Likelihood Ratio H0/H1:',round(dbinom(x,n,H0)/dbinom(x,n,H1),digits=2)," Likelihood Ratio H1/H0:",round(dbinom(x,n,H1)/dbinom(x,n,H0),digits=2)))
#dev.off()
#© Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Calculate the likelihood ratio----
n<-1000#set total trials
x<-500#set successes
H0 <- .4 #specify one hypothesis you want to compare with the likihood ratio
H1 <- 500/1000 #specify another hypothesis you want to compare with the likihood ratio (you can use 1/20, or 0.05)
dbinom(x,n,H0)/dbinom(x,n,H1) #Returns the likelihood ratio of H0 over H1
dbinom(x,n,H1)/dbinom(x,n,H0) #Returns the likelihood ratio of H1 over H0
theta<- seq(0,1,len=100) #create theta variable, from 0 to 1
like <- dbinom(x,n,theta)
#png(file="LikRatio.png",width=4000,height=3000, , units = "px", res = 900)
plot(theta,like,type='l',xlab=expression(theta), ylab='Likelihood', lwd=2)
points(H0,dbinom(x,n,H0))
points(H1,dbinom(x,n,H1))
segments(H0, dbinom(x,n,H0), x/n, dbinom(x,n,H0), lty=2, lwd=2)
segments(H1, dbinom(x,n,H1), x/n, dbinom(x,n,H1), lty=2, lwd=2)
segments(x/n, dbinom(x,n,H0), x/n, dbinom(x,n,H1), lwd=2)
title(paste('Likelihood Ratio H0/H1:',round(dbinom(x,n,H0)/dbinom(x,n,H1),digits=2)," Likelihood Ratio H1/H0:",round(dbinom(x,n,H1)/dbinom(x,n,H0),digits=2)))
#dev.off()
#© Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-100
#set successes
successes <-90
#Set the alpha for the Beta distribution for the prior
aprior<-100
#Set the beta for the Beta distribution for the prior
bprior<-100
alikelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, aposterior, bposterior)/dbeta(theta_H0, aprior, bprior)
points(theta_H0,dbeta(theta_H0, aposterior, bposterior), pch = 19)
points(theta_H0,dbeta(theta_H0, aprior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, aposterior, bposterior), theta_H0, dbeta(theta_H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-100
#set successes
successes <-80
#Set the alpha for the Beta distribution for the prior
aprior<-100
#Set the beta for the Beta distribution for the prior
bprior<-100
alikelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, aposterior, bposterior)/dbeta(theta_H0, aprior, bprior)
points(theta_H0,dbeta(theta_H0, aposterior, bposterior), pch = 19)
points(theta_H0,dbeta(theta_H0, aprior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, aposterior, bposterior), theta_H0, dbeta(theta_H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
H0<-0.5 #Set the point null hypothesis you want to calculate the Bayes Factor for
n<-20 #set total trials
x<-10 #set successes
aprior<-1 #Set the alpha for the Beta distribution for the prior
bprior<-1 #Set the beta for the Beta distribution for the prior
alikelihood<-x+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-n-x+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
theta<-seq(0,1,0.001) #create theta range from 0 to 1
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(H0, aposterior, bposterior)/dbeta(H0, aprior, bprior)
points(H0,dbeta(H0, aposterior, bposterior), pch = 19)
points(H0,dbeta(H0, aprior, bprior), pch = 19, col="grey")
segments(H0, dbeta(H0, aposterior, bposterior), H0, dbeta(H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-20
#set successes
successes <-10
#Set the alpha for the Beta distribution for the prior
aprior<-1
#Set the beta for the Beta distribution for the prior
bprior<-1
alikelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, aposterior, bposterior)/dbeta(theta_H0, aprior, bprior)
points(theta_H0,dbeta(theta_H0, aposterior, bposterior), pch = 19)
points(theta_H0,dbeta(theta_H0, aprior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, aposterior, bposterior), theta_H0, dbeta(theta_H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-200
#set successes
successes <-10
#Set the alpha for the Beta distribution for the prior
aprior<-1
#Set the beta for the Beta distribution for the prior
bprior<-1
alikelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, aposterior, bposterior)/dbeta(theta_H0, aprior, bprior)
points(theta_H0,dbeta(theta_H0, aposterior, bposterior), pch = 19)
points(theta_H0,dbeta(theta_H0, aprior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, aposterior, bposterior), theta_H0, dbeta(theta_H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-200
#set successes
successes <-100
#Set the alpha for the Beta distribution for the prior
aprior<-1
#Set the beta for the Beta distribution for the prior
bprior<-1
alikelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, aposterior, bposterior)/dbeta(theta_H0, aprior, bprior)
points(theta_H0,dbeta(theta_H0, aposterior, bposterior), pch = 19)
points(theta_H0,dbeta(theta_H0, aprior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, aposterior, bposterior), theta_H0, dbeta(theta_H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-200
#set successes
successes <-106
#Set the alpha for the Beta distribution for the prior
aprior<-1
#Set the beta for the Beta distribution for the prior
bprior<-1
alikelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, aposterior, bposterior)/dbeta(theta_H0, aprior, bprior)
points(theta_H0,dbeta(theta_H0, aposterior, bposterior), pch = 19)
points(theta_H0,dbeta(theta_H0, aprior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, aposterior, bposterior), theta_H0, dbeta(theta_H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-200
#set successes
successes <-107
#Set the alpha for the Beta distribution for the prior
aprior<-1
#Set the beta for the Beta distribution for the prior
bprior<-1
alikelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, aposterior, bposterior)/dbeta(theta_H0, aprior, bprior)
points(theta_H0,dbeta(theta_H0, aposterior, bposterior), pch = 19)
points(theta_H0,dbeta(theta_H0, aprior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, aposterior, bposterior), theta_H0, dbeta(theta_H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-200
#set successes
successes <-115
#Set the alpha for the Beta distribution for the prior
aprior<-1
#Set the beta for the Beta distribution for the prior
bprior<-1
alikelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
blikelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
aposterior<-aprior+alikelihood-1 #Calculate the alpha for the Beta distribution for the posterior
bposterior<-bprior+blikelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, aprior, bprior)
likelihood <- dbeta(theta, alikelihood, blikelihood)
posterior <- dbeta(theta, aposterior, bposterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, aposterior, bposterior)/dbeta(theta_H0, aprior, bprior)
points(theta_H0,dbeta(theta_H0, aposterior, bposterior), pch = 19)
points(theta_H0,dbeta(theta_H0, aprior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, aposterior, bposterior), theta_H0, dbeta(theta_H0, aprior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-200
#set successes
successes <-115
#Set the alpha for the Beta distribution for the prior
a_prior<-1
#Set the beta for the Beta distribution for the prior
bprior<-1
a_likelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
b_likelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
a_posterior<-a_prior+a_likelihood-1 #Calculate the alpha for the Beta distribution for the posterior
b_posterior<-bprior+b_likelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, a_prior, bprior)
likelihood <- dbeta(theta, a_likelihood, b_likelihood)
posterior <- dbeta(theta, a_posterior, b_posterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
BF10<-dbeta(theta_H0, a_posterior, b_posterior)/dbeta(theta_H0, a_prior, bprior)
points(theta_H0,dbeta(theta_H0, a_posterior, b_posterior), pch = 19)
points(theta_H0,dbeta(theta_H0, a_prior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, a_posterior, b_posterior), theta_H0, dbeta(theta_H0, a_prior, bprior), lty=2)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Set the point null hypothesis you want to calculate the Bayes Factor for
theta_H0 <-0.5
# Set total trials
total_trials <-200
#set successes
successes <-115
#Set the alpha for the Beta distribution for the prior
a_prior<-1
#Set the beta for the Beta distribution for the prior
bprior<-1
a_likelihood<-successes+1 #Calculate the alpha for the Beta distribution for the likelihood
b_likelihood<-total_trials-successes+1 #Calculate the beta for the Beta distribution for the likelihood
a_posterior<-a_prior+a_likelihood-1 #Calculate the alpha for the Beta distribution for the posterior
b_posterior<-bprior+b_likelihood-1 #Calculate the beta for the Beta distribution for the posterior
#create theta range from 0 to 1
theta<-seq(0,1,0.001)
#png(file="PriorLikelihoodPosterior.png",width=3000,height=3000, res = 500)
prior <- dbeta(theta, a_prior, bprior)
likelihood <- dbeta(theta, a_likelihood, b_likelihood)
posterior <- dbeta(theta, a_posterior, b_posterior)
plot(theta, posterior, ylim=c(0, 15), type = "l", lwd = 3, xlab = bquote(theta), ylab = "Density", las = 1)
lines(theta, prior, col="grey", lwd = 3)
lines(theta, likelihood, lty = 2, lwd = 3, col="dodgerblue")
points(theta_H0,dbeta(theta_H0, a_posterior, b_posterior), pch = 19)
points(theta_H0,dbeta(theta_H0, a_prior, bprior), pch = 19, col="grey")
segments(theta_H0, dbeta(theta_H0, a_posterior, b_posterior), theta_H0, dbeta(theta_H0, a_prior, bprior), lty=2)
BF10<-dbeta(theta_H0, a_posterior, b_posterior)/dbeta(theta_H0, a_prior, bprior)
title(paste('Bayes Factor:',round(BF10,digits=2)))
#dev.off()
#Š Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#to get emoticons for each test, set wait to 1 and showfaces to 1.
#When running large number of simulations, se wait to 0 and showfaces to 0.
options(scipen=20) #disable scientific notation for numbers
waitx<-0.5 #To see a small wait between individual trials, set a wait time to e.g., 0.5
showfaces<-1 #Set to 0 if you do not want the faces, set to 1 if you want to see the faces
nSims <- 100 #number of simulated experiments (for large numbers, set wait to 0 and showfaces to 0)
n<-50 #sample size in each group
#set up some variables
p<-numeric(nSims)
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = 100, sd = 15) #produce N simulated participants
y<-rnorm(n = n, mean = 106, sd = 15) #produce N simulated participants
z<-t.test(x,y) #perform the t-test
p[i]<-z$p.value #get the p-value and store it
if(z$p.value < 0.001  & showfaces==1){cat(":D     p =",z$p.value,"\n\n")}
if(0.001 <= z$p.value & z$p.value < 0.01  & showfaces==1){cat(":)     p =",z$p.value,"\n\n")}
if(0.01 <= z$p.value & z$p.value < 0.05  & showfaces==1){cat("(^.^)  p =",z$p.value,"\n\n")}
if(0.05 <= z$p.value & z$p.value < 0.10  & showfaces==1){cat("(._.)  p =",z$p.value,"\n\n")}
if(z$p.value>0.10  & showfaces==1){cat(":(     p =",z$p.value,"\n\n")}
Sys.sleep(waitx)
}
#now plot histograms of p-values, t-values, d, observed power
hist(p, main="Histogram of p-values", xlab=("Observed p-value"), breaks = 20)
#? Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#to get emoticons for each test, set wait to 1 and showfaces to 1.
#When running large number of simulations, se wait to 0 and showfaces to 0.
options(scipen=20) #disable scientific notation for numbers
waitx<-0.5 #To see a small wait between individual trials, set a wait time to e.g., 0.5
showfaces<-1 #Set to 0 if you do not want the faces, set to 1 if you want to see the faces
nSims <- 100 #number of simulated experiments (for large numbers, set wait to 0 and showfaces to 0)
n <- 164 #sample size in each group
#set up some variables
p<-numeric(nSims)
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = 100, sd = 15) #produce N simulated participants
y<-rnorm(n = n, mean = 106, sd = 15) #produce N simulated participants
z<-t.test(x,y) #perform the t-test
p[i]<-z$p.value #get the p-value and store it
if(z$p.value < 0.001  & showfaces==1){cat(":D     p =",z$p.value,"\n\n")}
if(0.001 <= z$p.value & z$p.value < 0.01  & showfaces==1){cat(":)     p =",z$p.value,"\n\n")}
if(0.01 <= z$p.value & z$p.value < 0.05  & showfaces==1){cat("(^.^)  p =",z$p.value,"\n\n")}
if(0.05 <= z$p.value & z$p.value < 0.10  & showfaces==1){cat("(._.)  p =",z$p.value,"\n\n")}
if(z$p.value>0.10  & showfaces==1){cat(":(     p =",z$p.value,"\n\n")}
Sys.sleep(waitx)
}
#now plot histograms of p-values, t-values, d, observed power
hist(p, main="Histogram of p-values", xlab=("Observed p-value"), breaks = 20)
#? Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Question 2 and 3 (replace the zeroes with correct values)
# You can type ?TOSTtwo for help with the TOSTtwo function
TOSTtwo(
m1 = 4.55,
m2 = 4.87,
sd1 = 1.05,
sd2 = 1.11,
n1 = 15,
n2 = 15,
low_eqbound_d = -0.5,
high_eqbound_d = 0.5
)
#Run the lines below to install and load the TOSTER package
#Install TOSTER package if needed
if (!require(TOSTER)) {
install.packages('TOSTER')
}
#Question 2 and 3 (replace the zeroes with correct values)
# You can type ?TOSTtwo for help with the TOSTtwo function
TOSTtwo(
m1 = 4.55,
m2 = 4.87,
sd1 = 1.05,
sd2 = 1.11,
n1 = 15,
n2 = 15,
low_eqbound_d = -0.5,
high_eqbound_d = 0.5
)
#Load TOSTER package
library(TOSTER)
#Question 2 and 3 (replace the zeroes with correct values)
# You can type ?TOSTtwo for help with the TOSTtwo function
TOSTtwo(
m1 = 4.55,
m2 = 4.87,
sd1 = 1.05,
sd2 = 1.11,
n1 = 15,
n2 = 15,
low_eqbound_d = -0.5,
high_eqbound_d = 0.5
)
TOSTtwo(
m1 = 4.55,
m2 = 4.87,
sd1 = 1.05,
sd2 = 1.11,
n1 = 150,
n2 = 150,
low_eqbound_d = -0.5,
high_eqbound_d = 0.5
)
